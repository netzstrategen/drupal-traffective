<?php

/**
 * @file
 * Contains traffective.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityManager;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\traffective\AdSlot;

/**
 * Implements hook_theme().
 */
function traffective_theme(): array {
  return AdSlot::traffective_theme();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function traffective_preprocess_field(&$variables): void {
  $element = $variables['element'];

  // Inject adslots after each 5th image in a gallery.
  if ($element['#bundle'] === 'gallery'
    && $element['#view_mode'] === 'gallery'
    && $variables['field_type'] === 'entity_reference'
    && !traffective_node_is_premium()
  ) {
    foreach ($variables['items'] as $index => $item) {
      if (($index + 1) % 6) {
        continue;
      }
      array_splice($variables['items'], $index, 0, [[
        'content' => [
          AdSlot::render('superbanner_fotogalerie'),
          AdSlot::render('rectangle_fotogalerie'),
          AdSlot::render('mobile_pos'),
        ],
      ]]);
    }
  }
}

/**
 * Implements hook_preporcess_node().
 */
function traffective_preprocess_node(&$variables) {
  // Limit Teads Ads to the Economy category, articles, longreads and non premium.
  if (isset($variables['node'])
    && $variables['node']->hasField('field_channel')
    && in_array($variables['node']->getType(), ['article', 'longread'], TRUE)
    && !traffective_node_is_premium($variables['node'])
    && $variables['view_mode'] === 'full'
  ) {
    $channels = $variables['node']->get('field_channel')->getValue();
    $is_economy = FALSE;
    foreach ($channels as $channel) {
      $term = Term::load($channel['target_id']);
      $is_economy = traffective_search_term($term, 'Wirtschaft');
    }
    if ($is_economy) {
      $variables['#attached']['library'][] = 'traffective/teads';
    }
  }
}

/**
 * Recusively searches if the given term object is a child of the given term name.
 */
function traffective_search_term(TermInterface $term, $name) {
  $term_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  if ($term->getName() === $name) {
    return TRUE;
  }
  else {
    $terms = $term_storage->loadParents($term->id());
    foreach ($terms as $term) {
      if ($term->label() === $name) {
        return TRUE;
      }
      else {
        return traffective_search_term($term, $name);
      }
    }
  }
}

/**
 * Returns the ad unit for a given term.
 *
 * If no ad unit is set for the given term, the closest parent ad unit is returned.
 */
function traffective_get_ad_unit(TermInterface $term) {
  $term_storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  if ($term->hasField('ad_unit') && !$ad_unit = $term->get('ad_unit')->value) {
    $terms = $term_storage->loadParents($term->id());
    if ($term->bundle() === 'regions' && !$terms) {
      $terms = taxonomy_term_load_multiple_by_name('Region', 'channel');
    }
    foreach ($terms as $term) {
      if ($term->hasField('ad_unit') && !$ad_unit = $term->get('ad_unit')->value) {
        return traffective_get_ad_unit($term);
      }
    }
  }
  return $ad_unit;
}

/**
 * Implements hook_page_attachments().
 *
 * @todo Create settings page.
 */
function traffective_page_attachments(array &$attachments): void {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }
  $attributes = \Drupal::request()->attributes;
  // Do not include ad script on pages.
  if ($node = $attributes->get('node')) {
    if ($node->bundle() === 'page' && !\Drupal::service('path.matcher')->isFrontPage()) {
      return;
    }
  }

  $script = "(function() {";
  $script .= "var s   = document.createElement('script');";
  $script .= "s.type  = 'text/javascript';";
  $script .= "s.async = true;";
  $script .= "s.src   = '//d.omsnative.de/d/init?c=native&w=oms.stimme.de';";
  $script .= "var sc  = document.getElementsByTagName('script')[0];";
  $script .= "sc.parentNode.insertBefore(s, sc);";
  $script .= "})();";

  $script .= "(function() {";
  $script .= "var s   = document.createElement('script');";
  $script .= "s.type  = 'text/javascript';";
  $script .= "s.async = true;";
  $script .= "s.src   = '//d.omsnative.de/d/init?c=native&w=mew.oms.stimme.de';";
  $script .= "var sc  = document.getElementsByTagName('script')[0];";
  $script .= "sc.parentNode.insertBefore(s, sc);";
  $script .= "})();";

  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => $script,
      '#weight' => 9999,
    ],
    'traffective_ad_loading_script',
  ];

  $is_premium = FALSE;
  $ad_unit = 'other';
  $pagetype = 'other';
  $slug = \Drupal::request()->getPathInfo();
  if ($taxonomy_term = $attributes->get('taxonomy_term')) {
    $pagetype = 'taxonomy_term';
    $slug = $taxonomy_term->toUrl()->toString();
    if ($unit = traffective_get_ad_unit($taxonomy_term)) {
      $ad_unit = $unit;
    }
  }

  if ($node) {
    $pagetype = 'node';
    $slug = $node->toUrl()->toString();
    if ($node->hasField('field_premium')) {
      $is_premium = filter_var($node->get('field_premium')->value, FILTER_VALIDATE_BOOLEAN);
    }
    if ($node->hasField('field_channel') && $channel = $node->get('field_channel')->getValue()) {
      $channel_term = $node->get('field_channel')->first()->get('entity')->getTarget()->getValue();
      if ($unit = traffective_get_ad_unit($channel_term)) {
        $ad_unit = $unit;
      }
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $ad_unit = 'homepage';
    $slug = '/';
  }

  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#external' => TRUE,
      '#minified' => TRUE,
      '#attributes' => [
        'src' => 'https://cdntrf.com/trf_stimme.js',
        'id' => 'trfAdSetup',
        'async' => TRUE,
        'data-traffectiveConf' => json_encode([
          'targeting' => [
            [
              'key' => 'zone',
              'values' => NULL,
              'value' => $ad_unit,
            ],
            [
              'key' => 'pagetype',
              'values' => NULL,
              'value' => $pagetype,
            ],
            [
              'key' => 'is_premium',
              'values' => NULL,
              'value' => $is_premium,
            ],
            [
              'key' => 'entity_slug',
              'values' => NULL,
              'value' => $slug,
            ],
          ],
          'dfpAdUrl' => '/5688434/stimme.de/' . $ad_unit,
        ]),
      ],
    ],
    'traffective',
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function traffective_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // @todo No ads on premium or "Polizeimeldungen".
  $node = $build['#node'];
  $is_premium = traffective_node_is_premium($node);
  $is_polizei = FALSE;
  $channel = '';

  if ($node->hasField('field_channel') && $channel = $node->get('field_channel')->getValue()) {
    $channel_term = $node->get('field_channel')->first()->get('entity')->getTarget()->getValue();
    $channel = $channel_term->getName();
    if ($channel === 'Polizei') {
      $is_polizei = TRUE;
    }
    else {
      $channel_id = $channel_term->id();
      $parents = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($channel_id);
      $parent = reset($parents);
      if ($parent instanceof Drupal\taxonomy\Entity\Term) {
        $is_polizei = $parent->getName() === 'Polizei';
      }
    }
  }

  if (empty($build['field_paragraphs'])) {
    return;
  }
  $paragraph_count = 0;
  $previous_is_text = FALSE;
  $previous_offset = FALSE;
  $entity_type = $node->getType();

  $ad_slots = [];
  // Counting the ad slot positions does include the teaser text.
  // As this is a separate field, we ignore it for our counters.
  if ($entity_type === 'article' && !$is_premium) {
    // The first rectangle should be placed after the 3rd paragraph,
    // after every 4th afterwards. Since rectangles use `float: right`,
    // we need to count one ahead.
    $ad_slots['rectangle'][] = new AdSlot('rectangle', 3);
  }
  elseif (($entity_type === 'longread' || $entity_type === 'article') && $is_premium) {
    // Place content ad after the 3rd paragraph, after every 7th afterwards.
    $ad_slots['parallax'][] = new AdSlot('content', 3);
  }
  // Array_splice expects a numeric index, use a dedicated array index counter.
  $i = 0;
  foreach ($build['field_paragraphs'] as $key => $paragraph) {
    $values = [];
    $i++;
    // Skip properties from the element.
    if (strpos($key, '#') === 0) {
      continue;
    }
    $entity = $paragraph['#paragraph'];
    $type = $entity->getType();

    // Ads should be placed between text content only.
    if (!in_array($type, ['text', 'statement'], TRUE)) {
      $previous_is_text = FALSE;
      continue;
    }
    $fields = [
      'text' => 'field_text',
      'statement' => 'field_statement_text',
    ];
    $field = $entity->get($fields[$type]);
    $value = $field->getValue();
    // Parse the paragraph content and get it's subnodes to create separate
    // paragraphs to be able to inject ad slots in between.
    $doc = Html::load($value[0]['value']);
    $selector = new \DOMXPath($doc);
    $body = $selector->query('.//body/*');
    // Empty the original paragraph array to avoid duplication.
    $build['field_paragraphs'][$key] = [];
    // Iterate over the DOM nodes to split them into separate paragraphs.
    foreach ($body as $node) {
      // Ads should be enclosed by text. This may lead to unexpected
      // results as we skip short and non text paragraphs for counting.
      if (!traffective_skip_node($node)) {
        $paragraph_count++;
      }
      $content = $doc->saveHTML($node);
      $new_paragraph = $paragraph;
      // Create a duplicate of the current paragraph entity and set
      // it's related value field to the current processed DOM node HTML value.
      $new_entity = $entity->createDuplicate();
      $field = $new_entity->get($fields[$type]);
      $field->setValue([
        'value' => $content,
        'format' => $value[0]['format'],
      ]);
      $new_paragraph['#paragraph'] = $new_entity;
      // Place ads only, if surrounded by text content paragraphs.
      if ($previous_is_text) {
        // Rectangle slots.
        if (!empty($ad_slots['rectangle'])) {
          $rectangle_ad_slot = array_shift($ad_slots['rectangle']);
        }
        $do_polizei_display = $is_polizei && $paragraph_count >= 2;
        if (isset($rectangle_ad_slot)
          && ($paragraph_count >= $rectangle_ad_slot->getOffset() + $previous_offset || $do_polizei_display)
          && !$rectangle_ad_slot->getPlaced()
        ) {
          $build['field_paragraphs'][$key][] = [
            AdSlot::render('rectangle'),
            AdSlot::render('mobile_pos'),
          ];
          $rectangle_ad_slot->setPlaced($paragraph_count);
          $previous_offset = $paragraph_count;
          // Inject another ad slot if the previous was rendered to adjust the
          // amount to the article length.
          if (!$is_polizei) {
            // Only place one ad to polizei articles.
            $ad_slots['rectangle'][] = new AdSlot('rectangle', 5);
          }
        }

        // Parallax slots.
        if (!empty($ad_slots['parallax'])) {
          $parallax_ad_slot = array_shift($ad_slots['parallax']);
        }
        if (isset($parallax_ad_slot)
          && $paragraph_count >= ($parallax_ad_slot->getOffset() + $previous_offset)
          && !$parallax_ad_slot->getPlaced()
        ) {
          $build['field_paragraphs'][$key][] = [
            AdSlot::render('content'),
          ];
          $parallax_ad_slot->setPlaced($paragraph_count);
          $previous_offset = $paragraph_count;
          $ad_slots['parallax'][] = new AdSlot('content', 7);
        }
      }
      $build['field_paragraphs'][$key][] = $new_paragraph;
      $previous_is_text = !traffective_skip_node($node);
    }
  }
  return $build;
}

/**
 * Do not consider empty paragraphs for placement calculation.
 *
 * Empty paragraphs seems to contain a UTF-8 &nbsp;
 * which is a two byte char sequence of 194 and 160.
 */
function traffective_skip_node($node) {
  $word_count = count(explode(' ', $node->textContent));
  return $word_count <= 20 || empty(trim($node->textContent, ' ' . chr(194) . chr(160)));
}

/**
 * Implements hook_install().
 */
function traffective_install() {
  $entity_type = 'taxonomy_term';
  $field_name = 'ad_unit';
  $entity_manager = \Drupal::entityManager();
  $bundles = $entity_manager->getBundleInfo($entity_type);
  foreach ($bundles as $bundle_id => $bundle) {
    if (!in_array($bundle_id, ['channel', 'regions', 'tags'], TRUE)) {
      continue;
    }
    if (!\Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type, $field_name)) {
      $ad_units = [
        'automotive',
        'business',
        'cinema',
        'computer',
        'entertainment',
        'event',
        'family',
        'football',
        'health',
        'jobs',
        'homepage',
        'jobs',
        'localnews',
        'localnews_no_oms',
        'nationalnews',
        'politik',
        'property',
        'science',
        'service',
        'sports',
        'stellenmarkt',
        'test',
        'test_lokal',
        'trauer',
        'travel',
        'weather',
      ];
      $field_storage = \Drupal\field\Entity\FieldStorageConfig::create([
        'field_name' => $field_name,
        'entity_type' => $entity_type,
        'type' => 'list_string',
        'cardinality' => 1,
        'settings' => [
          'allowed_values' => array_combine($ad_units, $ad_units),
        ],
      ]);
      $field_storage->save();
    }

    if (!\Drupal\field\Entity\FieldConfig::loadByName($entity_type, $bundle_id, $field_name)) {
      $instance = \Drupal\field\Entity\FieldConfig::create([
        'field_name' => $field_name,
        'label' => t('Ad Unit'),
        'entity_type' => $entity_type,
        'field_storage' => $field_storage,
        'bundle' => $bundle_id,
      ]);
      $instance->save();

      // Setup the display mode in the create/edit form.
      entity_get_form_display($entity_type, $bundle_id, 'default')
        ->setComponent($field_name, [
          'weight' => 20,
        ])
        ->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function traffective_uninstall() {
  $entity_type = 'taxonomy_term';
  $field_name = 'ad_unit';
  $entity_manager = \Drupal::entityManager();
  $bundles = $entity_manager->getBundleInfo($entity_type);
  foreach ($bundles as $bundle_id => $bundle) {
    if ($config = \Drupal\field\Entity\FieldConfig::loadByName($entity_type, $bundle_id, $field_name)) {
      $config->delete();
    }
    if ($storage = \Drupal\field\Entity\FieldStorageConfig::loadByName($entity_type, $field_name)) {
      $storage->delete();
    }
  }
}

/**
 * Implements hook_views_post_execute().
 */
function traffective_views_post_execute($view) {
  if ($view->id() !== 'content'
    || !$view->total_rows
    || !in_array($view->current_display, ['page', 'section'], TRUE)
    || \Drupal::routeMatch()->getRouteObject()->getOption('_admin_route')
  ) {
    return;
  }

  // Render a billboard on top of the first view and after every 2nd to
  // alternate with the native ads.
  $view_render = &drupal_static('views_render_count', 0);
  if ($view_render === 0) {
    $view->element['content']['skyscraper'] = AdSlot::render('Skyscraper');
    $view->element['content']['skyscraper']['#weight'] = -1;
  }
  if ($view_render % 2 === 0) {
    $ads = [
      AdSlot::render('billboard'),
      AdSlot::render('mobile_pos'),
    ];
    $view->element['#prefix'] = \Drupal::service('renderer')->render($ads);
  }
  $view_render++;
}

/**
 * Implements hook_block_access().
 */
function traffective_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $attributes = \Drupal::request()->attributes;

  // Hide Ligatus ads for premium content.
  if (strpos($block->getPluginId(), 'traffective_ligatus') !== FALSE && traffective_node_is_premium()) {
    return AccessResult::forbidden()->addCacheableDependency($block);
  }

  // Hide related content block for non premium content.
  if (strpos($block->getPluginId(), 'related_content') !== FALSE && !traffective_node_is_premium()) {
    return AccessResult::forbidden()->addCacheableDependency($block);
  }

  if ($block->getPluginId() === 'traffective_adslot' && $node = $attributes->get('node')) {
    $type = $block->getOriginalId();
    $forbidden = FALSE;
    // Hide out of content ads for premium content and galleries.
    if ((strpos($type, 'traffective') !== FALSE && traffective_node_is_premium())
      || $node->getType() === 'gallery'
      || $node->getType() === 'longread' && $block->getRegion() !== 'sidebar'
    ) {
      $forbidden = TRUE;
    }
    if ($forbidden) {
      return AccessResult::forbidden()->addCacheableDependency($block);
    }
  }
  return AccessResult::neutral()->addCacheableDependency($block);
}

/**
 * Checks if the current user has premium paywall access.
 *
 * @return bool
 */
function traffective_user_is_premium(): bool {
  $paywall_config = \Drupal::config('role_paywall.settings');
  $paywall_roles = $paywall_config->get('roles');
  $user_roles = \Drupal::currentUser()->getRoles();
  return !empty(array_intersect(array_keys($paywall_roles), $user_roles));
}

/**
 * Checks if a node is premium.
 *
 * If no node object is passed, we try to get it from the request.
 *
 * @return bool
 */
function traffective_node_is_premium($node = FALSE): bool {
  $is_premium = FALSE;
  if (!$node && $attributes = \Drupal::request()->attributes) {
    $node = $attributes->get('node');
  }
  if ($node && $node->hasField('field_premium')) {
    $is_premium = filter_var($node->get('field_premium')->value, FILTER_VALIDATE_BOOLEAN);
  }
  return $is_premium;
}
